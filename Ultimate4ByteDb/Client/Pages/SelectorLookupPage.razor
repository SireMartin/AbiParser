@page "/"

@using Ultimate4ByteDb.Shared
@using Models

@inject HttpClient client
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Selector Lookup</PageTitle>

<div class="container">
    <div class="row my-5">
        <div class="col-6">

            <EditForm Model="@selectorLookup" OnValidSubmit="OnValidSubmitHandlerAsync">
                <Blazored.FluentValidation.FluentValidationValidator />
                <ValidationSummary />

                <MudCard>
                    <MudCardContent>
                        <div class="row d-flex justify-content-evenly">
                            <div class="col">
                                <label for="inputSelector">Selector:</label>
                                <MudTextField id="inputSelector" @bind-Value="@selectorLookup.Selector" />
                            </div>
                            <div class="col d-flex align-content-center justify-content-center">
                                <MudButton ButtonType="ButtonType.Submit">Send</MudButton>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>

            </EditForm>

        </div>
    </div>
    @if(fbs is not null)
    {
        <div class="row my-5">
            <p>Output as TreeView for selector @($"0x{fbs.Selector}") :</p>
        </div>
        <div class="row my-5">
            <MudTreeView Items="@TreeItems" ExpandOnClick="true">
                <ItemTemplate>
                    <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems">
                        <Content>
                            <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild" />
                            <MudChip Icon="@context.Icon" IconColor="Color.Default" Color="Color.Primary" Label="true">@context.Text</MudChip>
                            @if (context.Occurence is not null)
                            {
                                <MudChip Icon="@Icons.Filled.Numbers" IconColor="Color.Default" Color="Color.Secondary">@context.Occurence</MudChip>
                            }
                            @if (context.Likelyhood is not null)
                            {
                                <MudChip Icon="@Icons.Filled.Percent" IconColor="Color.Default" Color="Color.Tertiary">@($"{context.Likelyhood * 100:F2}")</MudChip>
                            }
                        </Content>
                    </MudTreeViewItem>
                </ItemTemplate>
            </MudTreeView>
        </div>
        <div class="row my-5">
            <p>Ouput as Json for selector @($"0x{fbs.Selector}") :</p>
        </div>
    }
    else if(LookupFailed)
    {
        <div class="row my-5">
            No signature found for bytecode @selectorLookup.Selector
        </div>
    }

    <div class="row my-5">
        <pre id="json_content"></pre>
    </div>
</div>

@code{
    private SelectorLookup selectorLookup = new();
    private IJSObjectReference? jsObjectRef;
    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();
    private FourByteSelector? fbs;
    private bool LookupFailed;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(firstRender)
        {
            jsObjectRef = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/SelectorLookupPage.razor.js");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if(jsObjectRef is not null)
        {
            await jsObjectRef.DisposeAsync();
        }
    }

    private async Task OnValidSubmitHandlerAsync()
    {
        JsonSerializerOptions options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true, WriteIndented = true };
        options.Converters.Add(new JsonStringEnumConverter());
        try
        {
            fbs = await client.GetFromJsonAsync<FourByteSelector>($"/api/Selector/{selectorLookup.Selector}", options);
        }
        catch(Exception)
        {
            fbs = null;
            LookupFailed = true;
            await jsObjectRef.InvokeVoidAsync("clearJson");
            return;
        }
        LookupFailed = false;
        await jsObjectRef.InvokeVoidAsync("showJson", fbs);
        TreeItems.Clear();
        foreach(var iterSig in fbs.SigColl.OrderByDescending(x => x.Likelyhood))
        {
            TreeItemData sigItem = new TreeItemData($"{iterSig.Name}", iterSig.SigType == FourByteSelector.Signature.SignatureType.Function ? Icons.Filled.Functions : Icons.Filled.Event) { Likelyhood = iterSig.Likelyhood, Occurence = iterSig.Occurance };
            TreeItems.Add(sigItem);
            foreach(var iterInputVarType in iterSig.InputVarTypeColl)
            {
                TreeItemData inputVarTypeItem = new TreeItemData(iterInputVarType.InputVarType, Icons.Filled.Folder);
                sigItem.TreeItems.Add(inputVarTypeItem);
                foreach(var iterVarName in iterInputVarType.VarNameColl.OrderByDescending(x => x.Likelyhood))
                {
                    TreeItemData varNameItem = new TreeItemData($"{iterVarName.VarName}", Icons.Filled.Folder) { Likelyhood = iterVarName.Likelyhood, Occurence = iterVarName.Occurance };
                    inputVarTypeItem.TreeItems.Add(varNameItem);
                }
            }
        }
    }
}